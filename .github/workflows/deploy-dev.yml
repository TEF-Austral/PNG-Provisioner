name: Deploy to Development VM

on:
  repository_dispatch:
    types: [ service_updated ]
  push:
    paths:
      - 'dev/**'
      - '.env'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy ("all" or service name)'
        required: false
        default: 'all'

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event.client_payload.environment == 'dev'

    steps:
      - name: Get deployment info
        id: info
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # Convertir a min√∫sculas para coincidir con docker-compose
            SERVICE=$(echo "${{ github.event.client_payload.service }}" | tr '[:upper:]' '[:lower:]')
          
            echo "service=$SERVICE" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.client_payload.environment }}" >> $GITHUB_OUTPUT
          else
            # Convertir a min√∫sculas tambi√©n para workflow_dispatch
            SERVICE=$(echo "${{ github.event.inputs.service || 'all' }}" | tr '[:upper:]' '[:lower:]')
          
            echo "service=$SERVICE" >> $GITHUB_OUTPUT
            echo "version=dev" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Dev VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.DEV_VM_SSH_KEY }}
          script: |
            cd ~/PNG-Provisioner
            
            echo "üöÄ DEPLOYMENT INFO (DEV)"
            echo "Service: ${{ steps.info.outputs.service }}"
            echo "Version: ${{ steps.info.outputs.version }}"
            echo "Environment: dev"
            echo ""
            
            # Update provisioner repo
            git pull origin main
            
            # Verify .env exists in root
            if [ -f .env ]; then
              echo "üìÑ Using .env from root directory"
            else
              echo "‚ö†Ô∏è  Warning: .env file not found in root"
            fi
            
            # Move to dev directory
            cd dev
            
            # Login to GHCR
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Deploy (using .env from parent directory)
            if [ "${{ steps.info.outputs.service }}" = "all" ]; then
              docker compose --env-file ../.env pull
              docker compose --env-file ../.env up -d --remove-orphans
            else
              docker compose --env-file ../.env pull ${{ steps.info.outputs.service }}-api
              docker compose --env-file ../.env up -d ${{ steps.info.outputs.service }}-api
            fi
            
            # Cleanup
            docker image prune -f
            
            # Status
            echo ""
            docker compose ps
            echo ""
            echo "‚úÖ Dev deployment completed!"