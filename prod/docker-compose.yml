services:
  # === NGINX REVERSE PROXY ===
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy-prod # Nombre específico para prod
    ports:
      - "80:80" # Puerto público
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Asegúrate que nginx.conf esté en la misma carpeta o ajusta la ruta
    depends_on:
      # Depende de todos los servicios API para iniciar después
      - formatter-service-api
      - execution-service-api
      - analyzer-service-api
      - authorization-service-api
      - authentication-service-api
      - asset-service-api  # <-- AGREGADO
    networks:
      - prod-network
    restart: unless-stopped
    logging: &logging_config # Alias para reutilizar config de logging
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # === FORMATTER SERVICE ===
  formatter-db:
    image: postgres:16
    container_name: formatter_db_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER_FORMATTER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_FORMATTER}
      POSTGRES_DB: ${POSTGRES_DB_FORMATTER}
    volumes:
      - formatter_data_prod:/var/lib/postgresql/data
    networks:
      - prod-network
    restart: unless-stopped
    logging: *logging_config

  formatter-service-api:
    container_name: formatter-service-api-prod
    image: ghcr.io/tef-austral/formatter-service:latest # Usa la imagen ':latest' para prod
    ports:
      - 8001:8080 # Puerto expuesto (accesible a través de Nginx)
    environment:
      SPRING_PROFILES_ACTIVE: production # Activa el perfil de producción
      SPRING_DATASOURCE_URL: jdbc:postgresql://formatter-db:5432/${POSTGRES_DB_FORMATTER}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_FORMATTER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD_FORMATTER}
      # Auth0 (si este servicio necesita validar tokens)
      AUTH0_ISSUER_URI: ${AUTH0_ISSUER_URI}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
    depends_on:
      - formatter-db
    networks:
      - prod-network
    restart: unless-stopped
    logging: *logging_config

  # === EXECUTION SERVICE ===
  execution-db:
    image: postgres:16
    container_name: execution_db_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER_EXECUTION}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_EXECUTION}
      POSTGRES_DB: ${POSTGRES_DB_EXECUTION}
    volumes:
      - execution_data_prod:/var/lib/postgresql/data
    networks:
      - prod-network
    restart: unless-stopped
    logging: *logging_config

  execution-service-api:
    container_name: execution-service-api-prod
    image: ghcr.io/tef-austral/execution-service:latest # Usa la imagen ':latest' para prod
    ports:
      - 8003:8080
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://execution-db:5432/${POSTGRES_DB_EXECUTION}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_EXECUTION}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD_EXECUTION}
      # --- Configuración Auth0 y URL del servicio de autorización ---
      AUTH0_ISSUER_URI: ${AUTH0_ISSUER_URI}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTHORIZATION_SERVICE_URL: ${AUTHORIZATION_SERVICE_URL} # Pasa la URL
    depends_on:
      - execution-db
      - authorization-service-api # Dependencia explícita
    networks:
      - prod-network
    restart: unless-stopped
    logging: *logging_config

  # === ANALYZER SERVICE ===
  analyzer-db:
    image: postgres:16
    container_name: analyzer_db_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER_ANALYZER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_ANALYZER}
      POSTGRES_DB: ${POSTGRES_DB_ANALYZER}
    volumes:
      - analyzer_data_prod:/var/lib/postgresql/data
    networks:
      - prod-network
    restart: unless-stopped
    logging: *logging_config

  analyzer-service-api:
    container_name: analyzer-service-api-prod
    image: ghcr.io/tef-austral/analyzer-service:latest # Usa la imagen ':latest' para prod
    ports:
      - 8004:8080
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://analyzer-db:5432/${POSTGRES_DB_ANALYZER}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_ANALYZER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD_ANALYZER}
      # Auth0 (si necesita validar tokens)
      AUTH0_ISSUER_URI: ${AUTH0_ISSUER_URI}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
    depends_on:
      - analyzer-db
    networks:
      - prod-network
    restart: unless-stopped
    logging: *logging_config

  # === AUTHORIZATION SERVICE ===
  authorization-db:
    image: postgres:16
    container_name: authorization_db_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER_AUTHORIZATION}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_AUTHORIZATION}
      POSTGRES_DB: ${POSTGRES_DB_AUTHORIZATION}
    volumes:
      - authorization_data_prod:/var/lib/postgresql/data
    networks:
      - prod-network
    restart: unless-stopped
    logging: *logging_config

  authorization-service-api:
    container_name: authorization-service-api-prod
    image: ghcr.io/tef-austral/authorization-service:latest # Usa la imagen ':latest' para prod
    ports:
      - 8005:8080
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://authorization-db:5432/${POSTGRES_DB_AUTHORIZATION}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_AUTHORIZATION}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD_AUTHORIZATION}
      # --- Configuración Auth0 ---
      AUTH0_ISSUER_URI: ${AUTH0_ISSUER_URI}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
    depends_on:
      - authorization-db
    networks:
      - prod-network
    restart: unless-stopped
    logging: *logging_config

  # === AUTHENTICATION SERVICE ===
  authentication-db:
    image: postgres:16
    container_name: authentication_db_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER_AUTHENTICATION}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_AUTHENTICATION}
      POSTGRES_DB: ${POSTGRES_DB_AUTHENTICATION}
    volumes:
      - authentication_data_prod:/var/lib/postgresql/data
    networks:
      - prod-network
    restart: unless-stopped
    logging: *logging_config

  authentication-service-api:
    container_name: authentication-service-api-prod
    image: ghcr.io/tef-austral/authentication-service:latest # Usa la imagen ':latest' para prod
    ports:
      - 8006:8080
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://authentication-db:5432/${POSTGRES_DB_AUTHENTICATION}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_AUTHENTICATION}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD_AUTHENTICATION}
      # --- Configuración Auth0 (completa para API Management) ---
      AUTH0_ISSUER_URI: ${AUTH0_ISSUER_URI}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_MGMT_CLIENT_ID: ${AUTH0_MGMT_CLIENT_ID}
      AUTH0_MGMT_CLIENT_SECRET: ${AUTH0_MGMT_SECRET} # Asegúrate que el nombre coincida con tu .env
    depends_on:
      - authentication-db
    networks:
      - prod-network
    restart: unless-stopped
    logging: *logging_config

  # === ASSET SERVICE (AGREGADOS) ===
  asset-service-api:
    container_name: "asset_service_api_prod" # Sigue la convención _prod
    image: ghcr.io/austral-ingsis/snippet-asset-service:latest
    ports:
      - "8007:8080" # Asigné el puerto 8007 (asumiendo que está libre)
    environment:
      AZURE_HOST: "http://azurite"
      NEW_RELIC_APP_NAME: "asset-service"
      NEW_RELIC_AGENT_ENABLED: false
    networks: # <-- Conectado a tu red de prod
      - prod-network
    depends_on:
      - azurite
    restart: unless-stopped
    logging: *logging_config # Aplica la config de logging

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: "azurite_prod" # Sigue la convención _prod
    hostname: azurite
    restart: always
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - blob_prod:/workspace # Renombrado para prod
    networks: # <-- Conectado a tu red de prod
      - prod-network
    logging: *logging_config # Aplica la config de logging


volumes:
  formatter_data_prod:
  execution_data_prod:
  analyzer_data_prod:
  authorization_data_prod:
  authentication_data_prod:
  blob_prod: { }

networks:
  prod-network:
    driver: bridge