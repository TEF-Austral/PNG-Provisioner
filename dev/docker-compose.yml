version: '3'

services:
  webserver:
    image: nginx:latest
    container_name: nginx-proxy-dev
    ports:
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      - ./nginx/conf/:/etc/nginx/conf.d/:ro
      - ./certbot/www/:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/letsencrypt/:ro
    depends_on:
      - execution-service-api
      - authorization-service-api
      - asset-service-api
      - printscript-ui
      - snippet-service-api
    networks:
      - dev-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  certbot:
    image: certbot/certbot:latest
    container_name: certbot-dev
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    networks:
      - dev-network

  # === PRINTSCRIPT UI ===
  printscript-ui:
    container_name: printscript-ui-dev
    environment:
      VITE_AUTH0_DOMAIN: ${VITE_AUTH0_DOMAIN}
      VITE_AUTH0_CLIENT_ID: ${VITE_AUTH0_CLIENT_ID}
      PORT: 5173
    ports:
      - "5173:5173"
    networks:
      - dev-network
    restart: unless-stopped
    image: ghcr.io/tef-austral/printscript-ui:dev
    logging: &logging_defaults
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # === EXECUTION SERVICE ===
  execution-db:
    image: postgres:16
    container_name: execution_db_dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER_EXECUTION}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_EXECUTION}
      POSTGRES_DB: ${POSTGRES_DB_EXECUTION}
    volumes:
      - execution_data_dev:/var/lib/postgresql/data
    networks:
      - dev-network
    restart: unless-stopped
    logging: *logging_defaults

  execution-service-api:
    container_name: execution-service-api-dev
    image: ghcr.io/tef-austral/execution-service:dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      SPRING_DATASOURCE_URL: jdbc:postgresql://execution-db:5432/${POSTGRES_DB_EXECUTION}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_EXECUTION}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD_EXECUTION}
      AUTH0_ISSUER_URI: ${AUTH0_ISSUER_URI}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTHORIZATION_SERVICE_URL: ${AUTHORIZATION_SERVICE_URL}
    depends_on:
      - execution-db
      - authorization-service-api
    networks:
      - dev-network
    restart: unless-stopped
    logging: *logging_defaults

  # === AUTHORIZATION SERVICE ===
  authorization-db:
    image: postgres:16
    container_name: authorization_db_dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER_AUTHORIZATION}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_AUTHORIZATION}
      POSTGRES_DB: ${POSTGRES_DB_AUTHORIZATION}
    volumes:
      - authorization_data_dev:/var/lib/postgresql/data
    networks:
      - dev-network
    restart: unless-stopped
    logging: *logging_defaults

  authorization-service-api:
    container_name: authorization-service-api-dev
    image: ghcr.io/tef-austral/authorization-service:dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      SPRING_DATASOURCE_URL: jdbc:postgresql://authorization-db:5432/${POSTGRES_DB_AUTHORIZATION}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_AUTHORIZATION}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD_AUTHORIZATION}
      AUTH0_ISSUER_URI: ${AUTH0_ISSUER_URI}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
    depends_on:
      - authorization-db
    networks:
      - dev-network
    restart: unless-stopped
    logging: *logging_defaults

  # === SNIPPET SERVICE ===
  snippet-service-db:
    image: postgres:16
    container_name: snippet_db_dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER_SNIPPET}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_SNIPPET}
      POSTGRES_DB: ${POSTGRES_DB_SNIPPET}
    volumes:
      - snippet_data_dev:/var/lib/postgresql/data
    networks:
      - dev-network
    restart: unless-stopped

  snippet-service-api:
    container_name: snippet-service-api-dev
    image: ghcr.io/tef-austral/snippet-service:dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      SPRING_DATASOURCE_URL: jdbc:postgresql://snippet-service-db:5432/${POSTGRES_DB_SNIPPET}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_SNIPPET}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD_SNIPPET}
      ASSET_SERVICE_URL: ${ASSET_SERVICE_URL}
      JAVA_OPTS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - snippet-service-db
    networks:
      - dev-network
    restart: unless-stopped
    logging: *logging_defaults

  # === ASSET SERVICE ===
  asset-service-api:
    container_name: "asset_service_dev"
    image: ghcr.io/austral-ingsis/snippet-asset-service:latest
    environment:
      AZURE_HOST: "http://azurite"
      NEW_RELIC_APP_NAME: "asset-service"
      NEW_RELIC_AGENT_ENABLED: false
    networks:
      - dev-network
    depends_on:
      - azurite
    restart: unless-stopped
    logging: *logging_defaults

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: "azurite_dev"
    hostname: azurite
    restart: always
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - blob:/workspace
    networks:
      - dev-network
    logging: *logging_defaults

  redis-bus:
    image: redis:6-alpine
    container_name: "redis_bus_dev"
    ports:
      - "6379:6379"
    networks:
      - dev-network
    restart: unless-stopped
    logging: *logging_defaults

volumes:
  execution_data_dev:
  authorization_data_dev:
  snippet_data_dev:
  blob:
    external: false

networks:
  dev-network:
    driver: bridge